@using Microsoft.AspNetCore.Mvc.TagHelpers
@using Microsoft.AspNetCore.Identity
@model ProductManagementSystem.StevieTV.Helpers.PaginatedList<VideoGame>

@inject SignInManager<IdentityUser> SignInManager

@{
    ViewData["Title"] = "Index";
}

<h1>Video Games Index</h1>

<p>
    @if (SignInManager.IsSignedIn(User) && (User.IsInRole("Admin") || User.IsInRole("Staff")))
    {
        <a class="btn btn-success" asp-action="Create">Create New</a>
    }
</p>

<form asp-action="Index" method="get">
    <div class="input-group mb-3">
        <span class="input-group-text" id="SearchLabel">Find by name:</span>
        <input type="text" class="form-control" name="SearchString" value="@ViewData["CurrentFilter"]"/>
        <input type="submit" value="Search" class="btn btn-primary"/>
        @if (@ViewData["CurrentFilter"] != null)
        {
            <a class="btn btn-primary" asp-action="Index">Back to Full List</a>
        }
    </div>
</form>

<table class="table table-striped">
    <thead>
    <tr>
        <th scope="col">
            <a asp-action="Index" asp-route-sortOrder="@ViewData["NameSortParm"]">@Html.DisplayNameFor(model => model.FirstOrDefault().Name)</a>
        </th>
        <th scope="col">
            <a asp-action="Index" asp-route-sortOrder="@ViewData["ActiveSortParm"]">@Html.DisplayNameFor(model => model.FirstOrDefault().IsActive)</a>
        </th>
        <th scope="col">
            <a asp-action="Index" asp-route-sortOrder="@ViewData["DateSortParm"]">@Html.DisplayNameFor(model => model.FirstOrDefault().DateAdded)</a>
        </th>
        <th scope="col">
            <a asp-action="Index" asp-route-sortOrder="@ViewData["PriceSortParm"]">@Html.DisplayNameFor(model => model.FirstOrDefault().Price)</a>
        </th>
        <th></th>
    </tr>
    </thead>
    <tbody>
    @foreach (var item in Model)
    {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Name)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.IsActive)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.DateAdded)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Price)
            </td>
            <td>
                <div class="btn-group">
                <a class="btn btn-primary" asp-action="Details" asp-route-id="@item.Id">Details</a>
                @if (SignInManager.IsSignedIn(User) && (User.IsInRole("Admin") || User.IsInRole("Staff")))
                {
                    <a class="btn btn-warning" asp-action="Edit" asp-route-id="@item.Id">Edit</a>
                }
                @if (SignInManager.IsSignedIn(User) && User.IsInRole("Admin"))
                {
                    <a class="btn btn-danger" asp-action="Delete" asp-route-id="@item.Id">Delete</a>
                }
                </div>
            </td>
        </tr>
    }
    </tbody>
</table>

@{
    var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.HasNextPage ? "disabled" : "";
}
<div class="btn-group">
<a asp-action="Index"
   asp-route-sortOrder="@ViewData["CurrentSort"]"
   asp-route-pageNumber="@(Model.PageIndex - 1)"
   asp-route-currentFilter="@ViewData["CurrentFilter"]"
   class="btn btn-outline-secondary @prevDisabled">
    Previous
</a>
<a asp-action="Index"
   asp-route-sortOrder="@ViewData["CurrentSort"]"
   asp-route-pageNumber="@(Model.PageIndex + 1)"
   asp-route-currentFilter="@ViewData["CurrentFilter"]"
   class="btn btn-outline-secondary @nextDisabled">
    Next
</a>
</div>